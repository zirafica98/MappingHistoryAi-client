{"ast":null,"code":"var _jsxFileName = \"/Users/mihajlopetrovic/Desktop/Posao/MappingHistory-AI/client-2/src/Data/index.js\";\nimport React from 'react';\nimport StartFirebase from '../firebaseConfig/firebase';\nimport CustomMarker from '../Marker';\nimport MarkerInf from '../MarkerInf';\nimport { ref, onValue } from 'firebase/database';\nimport CustomMarkerMainCity from '../Marker/CustomMarkerMainCity';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst db = StartFirebase();\nexport class Data extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.useEffect = () => {// for (let i = 1; i <= 3; i++) {\n      //   setTimeout(() => this.state.setArray((prevState) => [...prevState, i]), 3000 * i);\n      // }\n    };\n\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: this.props.items,\n      data: null,\n      radius: this.props.radius,\n      counter: 0,\n      setArray: null,\n      city: this.props.city,\n      mainCity: false\n    };\n  }\n\n  async componentDidMount() {\n    var city = this.state.city.toLowerCase();\n\n    if (city === \"london\" || city === \"paris\" || city === \"new york\" || city === \"berlin\" || city === \"roma\") {\n      this.setState({\n        mainCity: true\n      });\n      const dbRef = ref(db, '/2/data');\n      onValue(dbRef, snapshot => {\n        var records = [];\n        snapshot.forEach(childSnapshot => {\n          let keyName = childSnapshot.key;\n          let data = childSnapshot.val();\n\n          if (this.getDistance([data.long_marker, data.lat], [this.state.items[0].lon, this.state.items[0].lat]) <= this.state.radius && records.length < 5) {\n            records.push({\n              \"key\": keyName,\n              \"data\": data\n            });\n          }\n        });\n        records.forEach(element => {\n          if (element.data.bc_ad == \"BC\") {\n            element.data.complateYear = element.data.year * -1;\n          } else {\n            element.data.complateYear = element.data.year;\n          }\n        });\n        records.sort(function (a, b) {\n          return parseFloat(a.data.complateYear) - parseFloat(b.data.complateYear);\n        });\n        this.setState({\n          data: records\n        });\n      });\n    } else {\n      const respons = await fetch('http://localhost:5001/openAi', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          // prompt: \"Give me the event, description, date in mm/dd/yyyy format, event type for the 5 most interesting historical events within 1 kilometer of the following location: \"+this.state.city+\". For each historical event, return me the longitude and the longitude where that event was located on the map. Return everything in json format in one line, ordered by date. I am only interested in events that happened within 1 km of \"+this.state.city+\". Please check if each event is related to the location I sent you.Please do not repeat the events!\" \n          //prompt:\"Give me the Event, Description, Date in mm/dd/yyyy format, Event Type for the 5 most interesting historical events within 1 kilometers of the following location: \"+this.state.city+\". For each historical event, return to me the Longitude and Longitude where that event was located on the map. Return it all to me in json format in one line, ordered by date.\"\n          //prompt:\"Give me Event, Description, Date in mm/dd/yyyy format, Event type (birth, death, wars up to 1700, wars from 1701 to 1900, wars from 1901 to 1920, wars from 1921 to 1950 and wars from 1950 to 2021, weather problems) for 5 historical events related to wars, murders, deaths, births, weather problems within \"+localStorage.getItem(\"range\")+\" meters of the following location: \"+this.state.citi+\". For each historical event, return me the longitude and the longitude where that event was located on the map. Return everything in json format in one line and start each key in json with a lowercase letter , sorted by date. I'm only interested in events that happened within 1 km of \"+this.state.city+\". Check that each event is linked to the location I sent you. Do not repeat events!\"\n          //prompt:\"Give me the event, description, date in mm/dd/yyyy format and type (best description of that event in 2-3 words ) for 1 historical events within \"+localStorage.getItem(\"range\")+\" meters of the following location: \" + this.state.city+\". For each historical event, return me the longitude and latitude where that event was located on the map. Return everything in json format in one line and start each key in the json with a lowercase letter, sorted by date. I'm only interested in events that happened within 1000 meters of \"+this.state.city+\". Check that each event is linked to the location I sent you. Do not repeat events!\"\n          prompt: \"Give me the event, description and date in mm/dd/yyyy format and type of event (description of that event in 2-3 words) for the most interesting historical event at the following location: \" + this.state.city + \". Send me the geographic longitude and latitude so that I know the approximate location of the event. Return everything in json format in one line and start each json keyword with a lowercase letter.\"\n        })\n      });\n\n      if (respons.ok) {\n        const data = await respons.json();\n        const parsedData = data.bot.trim();\n        console.log(parsedData);\n        this.setState({\n          data: JSON.parse(parsedData)\n        });\n      } else {\n        alert(\"error\");\n      }\n    }\n  }\n\n  getDistance(origin, destination) {\n    var lon1 = this.toRadian(origin[1]),\n        lat1 = this.toRadian(origin[0]),\n        lon2 = this.toRadian(destination[1]),\n        lat2 = this.toRadian(destination[0]);\n    var deltaLat = lat2 - lat1;\n    var deltaLon = lon2 - lon1;\n    var a = Math.pow(Math.sin(deltaLat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(deltaLon / 2), 2);\n    var c = 2 * Math.asin(Math.sqrt(a));\n    var EARTH_RADIUS = 6371;\n    return c * EARTH_RADIUS * 1000;\n  }\n\n  toRadian(degree) {\n    return degree * Math.PI / 180;\n  }\n\n  sleep(delay) {\n    var start = new Date().getTime();\n\n    while (new Date().getTime() < start + delay);\n  }\n\n  render() {\n    if (this.state.data == null) {\n      return 'Loading...';\n    } else {\n      if (this.state.mainCity) {\n        return /*#__PURE__*/_jsxDEV(CustomMarkerMainCity, {\n          things: this.state.data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 15\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(CustomMarker, {\n          things: this.state.data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 15\n        }, this);\n      }\n    }\n  }\n\n}","map":{"version":3,"names":["React","StartFirebase","CustomMarker","MarkerInf","ref","onValue","CustomMarkerMainCity","db","Data","Component","constructor","props","useEffect","state","error","isLoaded","items","data","radius","counter","setArray","city","mainCity","componentDidMount","toLowerCase","setState","dbRef","snapshot","records","forEach","childSnapshot","keyName","key","val","getDistance","long_marker","lat","lon","length","push","element","bc_ad","complateYear","year","sort","a","b","parseFloat","respons","fetch","method","headers","body","JSON","stringify","prompt","ok","json","parsedData","bot","trim","console","log","parse","alert","origin","destination","lon1","toRadian","lat1","lon2","lat2","deltaLat","deltaLon","Math","pow","sin","cos","c","asin","sqrt","EARTH_RADIUS","degree","PI","sleep","delay","start","Date","getTime","render"],"sources":["/Users/mihajlopetrovic/Desktop/Posao/MappingHistory-AI/client-2/src/Data/index.js"],"sourcesContent":["import React from 'react';\nimport StartFirebase from '../firebaseConfig/firebase';\nimport CustomMarker from '../Marker';\nimport MarkerInf from '../MarkerInf';\nimport {ref,onValue} from 'firebase/database'\nimport CustomMarkerMainCity from '../Marker/CustomMarkerMainCity';\nconst db = StartFirebase();\nexport class Data extends React.Component {\n      constructor(props) {\n        super(props);\n        this.state = {\n          error: null,\n          isLoaded: false,\n          items: this.props.items,\n          data:null,\n          radius:this.props.radius,\n          counter:0,\n          setArray:null,\n          city:this.props.city,\n          mainCity:false\n\n        }\n      }\n      useEffect= () => {\n        // for (let i = 1; i <= 3; i++) {\n        //   setTimeout(() => this.state.setArray((prevState) => [...prevState, i]), 3000 * i);\n        // }\n      };\n\n      async componentDidMount(){\n        var city = (this.state.city).toLowerCase()\n        if(city === \"london\" || city === \"paris\" || city === \"new york\" || city === \"berlin\" ||  city === \"roma\"){\n        this.setState({\n          mainCity:true\n        })\n        const dbRef = ref(db,'/2/data');\n        onValue(dbRef,(snapshot)=>{\n            var records=[]\n            snapshot.forEach(childSnapshot=>{\n                let keyName=childSnapshot.key;\n                let data=childSnapshot.val();\n                if(this.getDistance([data.long_marker,data.lat],[this.state.items[0].lon,this.state.items[0].lat])<=this.state.radius && records.length<5){\n                    records.push({\"key\":keyName,\"data\":data})\n                }\n            })\n\n            records.forEach((element) => {\n                if(element.data.bc_ad==\"BC\"){\n                    element.data.complateYear = element.data.year * (-1)\n                }else{\n                    element.data.complateYear = element.data.year \n                }\n            })\n\n            records.sort(function(a,b){\n                return parseFloat(a.data.complateYear) - parseFloat(b.data.complateYear);\n            })\n\n            this.setState({\n                data: records\n            });\n        })\n        }else{\n          const respons = await fetch('http://localhost:5001/openAi',{\n            method:'POST',\n            headers:{\n            'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                // prompt: \"Give me the event, description, date in mm/dd/yyyy format, event type for the 5 most interesting historical events within 1 kilometer of the following location: \"+this.state.city+\". For each historical event, return me the longitude and the longitude where that event was located on the map. Return everything in json format in one line, ordered by date. I am only interested in events that happened within 1 km of \"+this.state.city+\". Please check if each event is related to the location I sent you.Please do not repeat the events!\" \n                //prompt:\"Give me the Event, Description, Date in mm/dd/yyyy format, Event Type for the 5 most interesting historical events within 1 kilometers of the following location: \"+this.state.city+\". For each historical event, return to me the Longitude and Longitude where that event was located on the map. Return it all to me in json format in one line, ordered by date.\"\n              //prompt:\"Give me Event, Description, Date in mm/dd/yyyy format, Event type (birth, death, wars up to 1700, wars from 1701 to 1900, wars from 1901 to 1920, wars from 1921 to 1950 and wars from 1950 to 2021, weather problems) for 5 historical events related to wars, murders, deaths, births, weather problems within \"+localStorage.getItem(\"range\")+\" meters of the following location: \"+this.state.citi+\". For each historical event, return me the longitude and the longitude where that event was located on the map. Return everything in json format in one line and start each key in json with a lowercase letter , sorted by date. I'm only interested in events that happened within 1 km of \"+this.state.city+\". Check that each event is linked to the location I sent you. Do not repeat events!\"\n              //prompt:\"Give me the event, description, date in mm/dd/yyyy format and type (best description of that event in 2-3 words ) for 1 historical events within \"+localStorage.getItem(\"range\")+\" meters of the following location: \" + this.state.city+\". For each historical event, return me the longitude and latitude where that event was located on the map. Return everything in json format in one line and start each key in the json with a lowercase letter, sorted by date. I'm only interested in events that happened within 1000 meters of \"+this.state.city+\". Check that each event is linked to the location I sent you. Do not repeat events!\"\n              prompt:\"Give me the event, description and date in mm/dd/yyyy format and type of event (description of that event in 2-3 words) for the most interesting historical event at the following location: \"+ this.state.city+\". Send me the geographic longitude and latitude so that I know the approximate location of the event. Return everything in json format in one line and start each json keyword with a lowercase letter.\"\n            })\n          })\n\n          if(respons.ok){\n              const data = await respons.json();\n              const parsedData = data.bot.trim();\n              console.log(parsedData);\n              this.setState({\n                  data: JSON.parse(parsedData)\n              });\n          }else{\n              alert(\"error\")\n          }\n        }\n      }\n  \n\n\n    getDistance(origin, destination) {\n        var lon1 = this.toRadian(origin[1]),\n            lat1 = this.toRadian(origin[0]),\n            lon2 = this.toRadian(destination[1]),\n            lat2 = this.toRadian(destination[0]);\n    \n        var deltaLat = lat2 - lat1;\n        var deltaLon = lon2 - lon1;\n    \n        var a = Math.pow(Math.sin(deltaLat/2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(deltaLon/2), 2);\n        var c = 2 * Math.asin(Math.sqrt(a));\n        var EARTH_RADIUS = 6371;\n        return c * EARTH_RADIUS * 1000;\n    }\n    \n    toRadian(degree){\n        return degree*Math.PI/180\n    }\n    sleep(delay) {\n        var start = new Date().getTime();\n        while (new Date().getTime() < start + delay);\n    }\n\n    render() {\n\n        if (this.state.data == null) {\n            return 'Loading...';\n        }else{\n          if(this.state.mainCity) {\n            return (\n              <CustomMarkerMainCity things={this.state.data}></CustomMarkerMainCity>\n            );\n          }else{\n            return (\n              <CustomMarker things={this.state.data}></CustomMarker>\n            );\n          }\n            \n        }\n    }\n}\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,OAAOC,YAAP,MAAyB,WAAzB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAAQC,GAAR,EAAYC,OAAZ,QAA0B,mBAA1B;AACA,OAAOC,oBAAP,MAAiC,gCAAjC;;AACA,MAAMC,EAAE,GAAGN,aAAa,EAAxB;AACA,OAAO,MAAMO,IAAN,SAAmBR,KAAK,CAACS,SAAzB,CAAmC;EACpCC,WAAW,CAACC,KAAD,EAAQ;IACjB,MAAMA,KAAN;;IADiB,KAenBC,SAfmB,GAeR,MAAM,CACf;MACA;MACA;IACD,CAnBkB;;IAEjB,KAAKC,KAAL,GAAa;MACXC,KAAK,EAAE,IADI;MAEXC,QAAQ,EAAE,KAFC;MAGXC,KAAK,EAAE,KAAKL,KAAL,CAAWK,KAHP;MAIXC,IAAI,EAAC,IAJM;MAKXC,MAAM,EAAC,KAAKP,KAAL,CAAWO,MALP;MAMXC,OAAO,EAAC,CANG;MAOXC,QAAQ,EAAC,IAPE;MAQXC,IAAI,EAAC,KAAKV,KAAL,CAAWU,IARL;MASXC,QAAQ,EAAC;IATE,CAAb;EAYD;;EAOsB,MAAjBC,iBAAiB,GAAE;IACvB,IAAIF,IAAI,GAAI,KAAKR,KAAL,CAAWQ,IAAZ,CAAkBG,WAAlB,EAAX;;IACA,IAAGH,IAAI,KAAK,QAAT,IAAqBA,IAAI,KAAK,OAA9B,IAAyCA,IAAI,KAAK,UAAlD,IAAgEA,IAAI,KAAK,QAAzE,IAAsFA,IAAI,KAAK,MAAlG,EAAyG;MACzG,KAAKI,QAAL,CAAc;QACZH,QAAQ,EAAC;MADG,CAAd;MAGA,MAAMI,KAAK,GAAGtB,GAAG,CAACG,EAAD,EAAI,SAAJ,CAAjB;MACAF,OAAO,CAACqB,KAAD,EAAQC,QAAD,IAAY;QACtB,IAAIC,OAAO,GAAC,EAAZ;QACAD,QAAQ,CAACE,OAAT,CAAiBC,aAAa,IAAE;UAC5B,IAAIC,OAAO,GAACD,aAAa,CAACE,GAA1B;UACA,IAAIf,IAAI,GAACa,aAAa,CAACG,GAAd,EAAT;;UACA,IAAG,KAAKC,WAAL,CAAiB,CAACjB,IAAI,CAACkB,WAAN,EAAkBlB,IAAI,CAACmB,GAAvB,CAAjB,EAA6C,CAAC,KAAKvB,KAAL,CAAWG,KAAX,CAAiB,CAAjB,EAAoBqB,GAArB,EAAyB,KAAKxB,KAAL,CAAWG,KAAX,CAAiB,CAAjB,EAAoBoB,GAA7C,CAA7C,KAAiG,KAAKvB,KAAL,CAAWK,MAA5G,IAAsHU,OAAO,CAACU,MAAR,GAAe,CAAxI,EAA0I;YACtIV,OAAO,CAACW,IAAR,CAAa;cAAC,OAAMR,OAAP;cAAe,QAAOd;YAAtB,CAAb;UACH;QACJ,CAND;QAQAW,OAAO,CAACC,OAAR,CAAiBW,OAAD,IAAa;UACzB,IAAGA,OAAO,CAACvB,IAAR,CAAawB,KAAb,IAAoB,IAAvB,EAA4B;YACxBD,OAAO,CAACvB,IAAR,CAAayB,YAAb,GAA4BF,OAAO,CAACvB,IAAR,CAAa0B,IAAb,GAAqB,CAAC,CAAlD;UACH,CAFD,MAEK;YACDH,OAAO,CAACvB,IAAR,CAAayB,YAAb,GAA4BF,OAAO,CAACvB,IAAR,CAAa0B,IAAzC;UACH;QACJ,CAND;QAQAf,OAAO,CAACgB,IAAR,CAAa,UAASC,CAAT,EAAWC,CAAX,EAAa;UACtB,OAAOC,UAAU,CAACF,CAAC,CAAC5B,IAAF,CAAOyB,YAAR,CAAV,GAAkCK,UAAU,CAACD,CAAC,CAAC7B,IAAF,CAAOyB,YAAR,CAAnD;QACH,CAFD;QAIA,KAAKjB,QAAL,CAAc;UACVR,IAAI,EAAEW;QADI,CAAd;MAGH,CAzBM,CAAP;IA0BC,CA/BD,MA+BK;MACH,MAAMoB,OAAO,GAAG,MAAMC,KAAK,CAAC,8BAAD,EAAgC;QACzDC,MAAM,EAAC,MADkD;QAEzDC,OAAO,EAAC;UACR,gBAAgB;QADR,CAFiD;QAKzDC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;UACjB;UACA;UACF;UACA;UACAC,MAAM,EAAC,kMAAiM,KAAK1C,KAAL,CAAWQ,IAA5M,GAAiN;QALrM,CAAf;MALmD,CAAhC,CAA3B;;MAcA,IAAG2B,OAAO,CAACQ,EAAX,EAAc;QACV,MAAMvC,IAAI,GAAG,MAAM+B,OAAO,CAACS,IAAR,EAAnB;QACA,MAAMC,UAAU,GAAGzC,IAAI,CAAC0C,GAAL,CAASC,IAAT,EAAnB;QACAC,OAAO,CAACC,GAAR,CAAYJ,UAAZ;QACA,KAAKjC,QAAL,CAAc;UACVR,IAAI,EAAEoC,IAAI,CAACU,KAAL,CAAWL,UAAX;QADI,CAAd;MAGH,CAPD,MAOK;QACDM,KAAK,CAAC,OAAD,CAAL;MACH;IACF;EACF;;EAIH9B,WAAW,CAAC+B,MAAD,EAASC,WAAT,EAAsB;IAC7B,IAAIC,IAAI,GAAG,KAAKC,QAAL,CAAcH,MAAM,CAAC,CAAD,CAApB,CAAX;IAAA,IACII,IAAI,GAAG,KAAKD,QAAL,CAAcH,MAAM,CAAC,CAAD,CAApB,CADX;IAAA,IAEIK,IAAI,GAAG,KAAKF,QAAL,CAAcF,WAAW,CAAC,CAAD,CAAzB,CAFX;IAAA,IAGIK,IAAI,GAAG,KAAKH,QAAL,CAAcF,WAAW,CAAC,CAAD,CAAzB,CAHX;IAKA,IAAIM,QAAQ,GAAGD,IAAI,GAAGF,IAAtB;IACA,IAAII,QAAQ,GAAGH,IAAI,GAAGH,IAAtB;IAEA,IAAItB,CAAC,GAAG6B,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASJ,QAAQ,GAAC,CAAlB,CAAT,EAA+B,CAA/B,IAAoCE,IAAI,CAACG,GAAL,CAASR,IAAT,IAAiBK,IAAI,CAACG,GAAL,CAASN,IAAT,CAAjB,GAAkCG,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASH,QAAQ,GAAC,CAAlB,CAAT,EAA+B,CAA/B,CAA9E;IACA,IAAIK,CAAC,GAAG,IAAIJ,IAAI,CAACK,IAAL,CAAUL,IAAI,CAACM,IAAL,CAAUnC,CAAV,CAAV,CAAZ;IACA,IAAIoC,YAAY,GAAG,IAAnB;IACA,OAAOH,CAAC,GAAGG,YAAJ,GAAmB,IAA1B;EACH;;EAEDb,QAAQ,CAACc,MAAD,EAAQ;IACZ,OAAOA,MAAM,GAACR,IAAI,CAACS,EAAZ,GAAe,GAAtB;EACH;;EACDC,KAAK,CAACC,KAAD,EAAQ;IACT,IAAIC,KAAK,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAZ;;IACA,OAAO,IAAID,IAAJ,GAAWC,OAAX,KAAuBF,KAAK,GAAGD,KAAtC,CAA4C;EAC/C;;EAEDI,MAAM,GAAG;IAEL,IAAI,KAAK5E,KAAL,CAAWI,IAAX,IAAmB,IAAvB,EAA6B;MACzB,OAAO,YAAP;IACH,CAFD,MAEK;MACH,IAAG,KAAKJ,KAAL,CAAWS,QAAd,EAAwB;QACtB,oBACE,QAAC,oBAAD;UAAsB,MAAM,EAAE,KAAKT,KAAL,CAAWI;QAAzC;UAAA;UAAA;UAAA;QAAA,QADF;MAGD,CAJD,MAIK;QACH,oBACE,QAAC,YAAD;UAAc,MAAM,EAAE,KAAKJ,KAAL,CAAWI;QAAjC;UAAA;UAAA;UAAA;QAAA,QADF;MAGD;IAEF;EACJ;;AA5HqC"},"metadata":{},"sourceType":"module"}