{"ast":null,"code":"var _jsxFileName = \"/Users/mihajlopetrovic/Desktop/Posao/MappingHistory-AI/client-2/src/Data/index.js\";\nimport React from 'react';\nimport StartFirebase from '../firebaseConfig/firebase';\nimport CustomMarker from '../Marker';\nimport MarkerInf from '../MarkerInf';\nimport { ref, onValue } from 'firebase/database';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst db = StartFirebase();\nexport class Data extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.useEffect = () => {\n      for (let i = 1; i <= 3; i++) {\n        setTimeout(() => this.state.setArray(prevState => [...prevState, i]), 3000 * i);\n      }\n    };\n\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: this.props.items,\n      data: null,\n      radius: this.props.radius,\n      counter: 0,\n      setArray: null\n    };\n  }\n\n  async componentDidMount() {\n    // const dbRef = ref(db,'/2/data');\n    // onValue(dbRef,(snapshot)=>{\n    //     var records=[]\n    //     snapshot.forEach(childSnapshot=>{\n    //         let keyName=childSnapshot.key;\n    //         let data=childSnapshot.val();\n    //         if(this.getDistance([data.long_marker,data.lat],[this.state.items[0].lon,this.state.items[0].lat])<=this.state.radius && records.length<5){\n    //             records.push({\"key\":keyName,\"data\":data})\n    //         }\n    //     })\n    //     records.forEach((element) => {\n    //         if(element.data.bc_ad==\"BC\"){\n    //             element.data.complateYear = element.data.year * (-1)\n    //         }else{\n    //             element.data.complateYear = element.data.year \n    //         }\n    //     })\n    //     records.sort(function(a,b){\n    //         return parseFloat(a.data.complateYear) - parseFloat(b.data.complateYear);\n    //     })\n    //     this.setState({\n    //         data: records\n    //     });\n    // })\n    const respons = await fetch('http://localhost:5001/openAi', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        // prompt: \"Give me the Event, Description, Date in mm/dd/yyyy format, Longitude, Latitude, Event type for the 5 most interesting historical events within 5 kilometers of the following location: \"+this.state.items[0].lat+\", \"+this.state.items[0].lon+\". Return it all to me in json format in one line, sorted by date.\" \n        prompt: \"Give me the Event, Description, Date in mm/dd/yyyy format, Event Type for the 5 most interesting historical events within 5 kilometers of the following location: \" + this.state.items[0].lat + \", \" + this.state.items[0].lon + \". For each historical event, return the geographic Longitude and Longitude where that event took place. Return it all to me in json format in one line, ordered by date.\"\n      })\n    });\n\n    if (respons.ok) {\n      const data = await respons.json();\n      const parsedData = data.bot.trim();\n      console.log(parsedData);\n      this.setState({\n        data: JSON.parse(parsedData)\n      });\n    } else {\n      alert(\"error\");\n    }\n  }\n\n  getDistance(origin, destination) {\n    var lon1 = this.toRadian(origin[1]),\n        lat1 = this.toRadian(origin[0]),\n        lon2 = this.toRadian(destination[1]),\n        lat2 = this.toRadian(destination[0]);\n    var deltaLat = lat2 - lat1;\n    var deltaLon = lon2 - lon1;\n    var a = Math.pow(Math.sin(deltaLat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(deltaLon / 2), 2);\n    var c = 2 * Math.asin(Math.sqrt(a));\n    var EARTH_RADIUS = 6371;\n    return c * EARTH_RADIUS * 1000;\n  }\n\n  toRadian(degree) {\n    return degree * Math.PI / 180;\n  }\n\n  sleep(delay) {\n    var start = new Date().getTime();\n\n    while (new Date().getTime() < start + delay);\n  }\n\n  render() {\n    if (this.state.data == null) {\n      return 'Loading...';\n    } else {\n      return /*#__PURE__*/_jsxDEV(CustomMarker, {\n        things: this.state.data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}","map":{"version":3,"names":["React","StartFirebase","CustomMarker","MarkerInf","ref","onValue","db","Data","Component","constructor","props","useEffect","i","setTimeout","state","setArray","prevState","error","isLoaded","items","data","radius","counter","componentDidMount","respons","fetch","method","headers","body","JSON","stringify","prompt","lat","lon","ok","json","parsedData","bot","trim","console","log","setState","parse","alert","getDistance","origin","destination","lon1","toRadian","lat1","lon2","lat2","deltaLat","deltaLon","a","Math","pow","sin","cos","c","asin","sqrt","EARTH_RADIUS","degree","PI","sleep","delay","start","Date","getTime","render"],"sources":["/Users/mihajlopetrovic/Desktop/Posao/MappingHistory-AI/client-2/src/Data/index.js"],"sourcesContent":["import React from 'react';\nimport StartFirebase from '../firebaseConfig/firebase';\nimport CustomMarker from '../Marker';\nimport MarkerInf from '../MarkerInf';\nimport {ref,onValue} from 'firebase/database'\nconst db = StartFirebase();\nexport class Data extends React.Component {\n      constructor(props) {\n        super(props);\n        this.state = {\n          error: null,\n          isLoaded: false,\n          items: this.props.items,\n          data:null,\n          radius:this.props.radius,\n          counter:0,\n          setArray:null\n\n        }\n      }\n      useEffect= () => {\n        for (let i = 1; i <= 3; i++) {\n          setTimeout(() => this.state.setArray((prevState) => [...prevState, i]), 3000 * i);\n        }\n      };\n      async componentDidMount(){\n        // const dbRef = ref(db,'/2/data');\n        // onValue(dbRef,(snapshot)=>{\n        //     var records=[]\n        //     snapshot.forEach(childSnapshot=>{\n        //         let keyName=childSnapshot.key;\n        //         let data=childSnapshot.val();\n        //         if(this.getDistance([data.long_marker,data.lat],[this.state.items[0].lon,this.state.items[0].lat])<=this.state.radius && records.length<5){\n        //             records.push({\"key\":keyName,\"data\":data})\n        //         }\n        //     })\n\n        //     records.forEach((element) => {\n        //         if(element.data.bc_ad==\"BC\"){\n        //             element.data.complateYear = element.data.year * (-1)\n        //         }else{\n        //             element.data.complateYear = element.data.year \n        //         }\n        //     })\n\n        //     records.sort(function(a,b){\n        //         return parseFloat(a.data.complateYear) - parseFloat(b.data.complateYear);\n        //     })\n\n        //     this.setState({\n        //         data: records\n        //     });\n        // })\n\n        const respons = await fetch('http://localhost:5001/openAi',{\n            method:'POST',\n            headers:{\n            'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                // prompt: \"Give me the Event, Description, Date in mm/dd/yyyy format, Longitude, Latitude, Event type for the 5 most interesting historical events within 5 kilometers of the following location: \"+this.state.items[0].lat+\", \"+this.state.items[0].lon+\". Return it all to me in json format in one line, sorted by date.\" \n                prompt:\"Give me the Event, Description, Date in mm/dd/yyyy format, Event Type for the 5 most interesting historical events within 5 kilometers of the following location: \"+this.state.items[0].lat+\", \"+this.state .items[0].lon+\". For each historical event, return the geographic Longitude and Longitude where that event took place. Return it all to me in json format in one line, ordered by date.\"\n            })\n        })\n\n        if(respons.ok){\n            const data = await respons.json();\n            const parsedData = data.bot.trim();\n            console.log(parsedData);\n            this.setState({\n                data: JSON.parse(parsedData)\n            });\n          }else{\n            alert(\"error\")\n          }\n    }\n\n\n    getDistance(origin, destination) {\n        var lon1 = this.toRadian(origin[1]),\n            lat1 = this.toRadian(origin[0]),\n            lon2 = this.toRadian(destination[1]),\n            lat2 = this.toRadian(destination[0]);\n    \n        var deltaLat = lat2 - lat1;\n        var deltaLon = lon2 - lon1;\n    \n        var a = Math.pow(Math.sin(deltaLat/2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(deltaLon/2), 2);\n        var c = 2 * Math.asin(Math.sqrt(a));\n        var EARTH_RADIUS = 6371;\n        return c * EARTH_RADIUS * 1000;\n    }\n    \n    toRadian(degree){\n        return degree*Math.PI/180\n    }\n    sleep(delay) {\n        var start = new Date().getTime();\n        while (new Date().getTime() < start + delay);\n    }\n\n    render() {\n\n        if (this.state.data == null) {\n            return 'Loading...';\n        }else{\n            return (\n                <CustomMarker things={this.state.data}></CustomMarker>\n              );\n        }\n    }\n}\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,OAAOC,YAAP,MAAyB,WAAzB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAAQC,GAAR,EAAYC,OAAZ,QAA0B,mBAA1B;;AACA,MAAMC,EAAE,GAAGL,aAAa,EAAxB;AACA,OAAO,MAAMM,IAAN,SAAmBP,KAAK,CAACQ,SAAzB,CAAmC;EACpCC,WAAW,CAACC,KAAD,EAAQ;IACjB,MAAMA,KAAN;;IADiB,KAanBC,SAbmB,GAaR,MAAM;MACf,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;QAC3BC,UAAU,CAAC,MAAM,KAAKC,KAAL,CAAWC,QAAX,CAAqBC,SAAD,IAAe,CAAC,GAAGA,SAAJ,EAAeJ,CAAf,CAAnC,CAAP,EAA8D,OAAOA,CAArE,CAAV;MACD;IACF,CAjBkB;;IAEjB,KAAKE,KAAL,GAAa;MACXG,KAAK,EAAE,IADI;MAEXC,QAAQ,EAAE,KAFC;MAGXC,KAAK,EAAE,KAAKT,KAAL,CAAWS,KAHP;MAIXC,IAAI,EAAC,IAJM;MAKXC,MAAM,EAAC,KAAKX,KAAL,CAAWW,MALP;MAMXC,OAAO,EAAC,CANG;MAOXP,QAAQ,EAAC;IAPE,CAAb;EAUD;;EAMsB,MAAjBQ,iBAAiB,GAAE;IACvB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IAEA;IACA;IACA;IACA;IAEA,MAAMC,OAAO,GAAG,MAAMC,KAAK,CAAC,8BAAD,EAAgC;MACvDC,MAAM,EAAC,MADgD;MAEvDC,OAAO,EAAC;QACR,gBAAgB;MADR,CAF+C;MAKvDC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;QACjB;QACAC,MAAM,EAAC,uKAAqK,KAAKjB,KAAL,CAAWK,KAAX,CAAiB,CAAjB,EAAoBa,GAAzL,GAA6L,IAA7L,GAAkM,KAAKlB,KAAL,CAAYK,KAAZ,CAAkB,CAAlB,EAAqBc,GAAvN,GAA2N;MAFjN,CAAf;IALiD,CAAhC,CAA3B;;IAWA,IAAGT,OAAO,CAACU,EAAX,EAAc;MACV,MAAMd,IAAI,GAAG,MAAMI,OAAO,CAACW,IAAR,EAAnB;MACA,MAAMC,UAAU,GAAGhB,IAAI,CAACiB,GAAL,CAASC,IAAT,EAAnB;MACAC,OAAO,CAACC,GAAR,CAAYJ,UAAZ;MACA,KAAKK,QAAL,CAAc;QACVrB,IAAI,EAAES,IAAI,CAACa,KAAL,CAAWN,UAAX;MADI,CAAd;IAGD,CAPH,MAOO;MACHO,KAAK,CAAC,OAAD,CAAL;IACD;EACN;;EAGDC,WAAW,CAACC,MAAD,EAASC,WAAT,EAAsB;IAC7B,IAAIC,IAAI,GAAG,KAAKC,QAAL,CAAcH,MAAM,CAAC,CAAD,CAApB,CAAX;IAAA,IACII,IAAI,GAAG,KAAKD,QAAL,CAAcH,MAAM,CAAC,CAAD,CAApB,CADX;IAAA,IAEIK,IAAI,GAAG,KAAKF,QAAL,CAAcF,WAAW,CAAC,CAAD,CAAzB,CAFX;IAAA,IAGIK,IAAI,GAAG,KAAKH,QAAL,CAAcF,WAAW,CAAC,CAAD,CAAzB,CAHX;IAKA,IAAIM,QAAQ,GAAGD,IAAI,GAAGF,IAAtB;IACA,IAAII,QAAQ,GAAGH,IAAI,GAAGH,IAAtB;IAEA,IAAIO,CAAC,GAAGC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASL,QAAQ,GAAC,CAAlB,CAAT,EAA+B,CAA/B,IAAoCG,IAAI,CAACG,GAAL,CAAST,IAAT,IAAiBM,IAAI,CAACG,GAAL,CAASP,IAAT,CAAjB,GAAkCI,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASJ,QAAQ,GAAC,CAAlB,CAAT,EAA+B,CAA/B,CAA9E;IACA,IAAIM,CAAC,GAAG,IAAIJ,IAAI,CAACK,IAAL,CAAUL,IAAI,CAACM,IAAL,CAAUP,CAAV,CAAV,CAAZ;IACA,IAAIQ,YAAY,GAAG,IAAnB;IACA,OAAOH,CAAC,GAAGG,YAAJ,GAAmB,IAA1B;EACH;;EAEDd,QAAQ,CAACe,MAAD,EAAQ;IACZ,OAAOA,MAAM,GAACR,IAAI,CAACS,EAAZ,GAAe,GAAtB;EACH;;EACDC,KAAK,CAACC,KAAD,EAAQ;IACT,IAAIC,KAAK,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAZ;;IACA,OAAO,IAAID,IAAJ,GAAWC,OAAX,KAAuBF,KAAK,GAAGD,KAAtC,CAA4C;EAC/C;;EAEDI,MAAM,GAAG;IAEL,IAAI,KAAKxD,KAAL,CAAWM,IAAX,IAAmB,IAAvB,EAA6B;MACzB,OAAO,YAAP;IACH,CAFD,MAEK;MACD,oBACI,QAAC,YAAD;QAAc,MAAM,EAAE,KAAKN,KAAL,CAAWM;MAAjC;QAAA;QAAA;QAAA;MAAA,QADJ;IAGH;EACJ;;AAxGqC"},"metadata":{},"sourceType":"module"}