{"ast":null,"code":"import MapPoly from \"./mapPoly\";\nexport default function AddPolygon(props) {\n  var otherNumber;\n  var minnumber = new Date().getFullYear();\n  var smallNumber;\n  var relativeValue;\n  var finalnumber;\n  var yearForGeoJson = [-1, -1000, -200, -2000, -323, -500, 1000, 117, 1279, 1492, 1530, 1650, 1715, 1783, 1815, 1830, 1850, 1861, 1872, 1880, 1914, 1920, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1994, 2020, 400, 600, 800];\n  var yearForPoly = props.yearMarker;\n\n  if (yearForPoly <= 0) {\n    if (yearForPoly < 0 && yearForPoly > -200) {\n      MapPoly(\"BC-\" + 1 + \"-1-1\");\n    } else if (yearForPoly < -200 && yearForPoly > -323) {\n      MapPoly(\"BC-\" + 200 + \"-1-1\");\n    } else if (yearForPoly < -323 && yearForPoly > -500) {\n      MapPoly(\"BC-\" + 323 + \"-1-1\");\n    } else if (yearForPoly < -500 && yearForPoly > -1000) {\n      MapPoly(\"BC-\" + 500 + \"-1-1\");\n    } else if (yearForPoly < -1000 && yearForPoly > -2000) {\n      MapPoly(\"BC-\" + -1000 + \"-1-1\");\n    } else if (yearForPoly < -2000) {\n      MapPoly(\"BC-\" + 2000 + \"-1-1\");\n    }\n  } else {\n    let arrayYearJson = [];\n    let place;\n    yearForGeoJson.forEach(function (array, index) {\n      //var yearsJson=array.split(\"-\");\n      arrayYearJson.push(parseInt(array));\n    });\n    arrayYearJson.push(parseInt(yearForPoly));\n    arrayYearJson.sort(function (a, b) {\n      return a - b;\n    });\n    arrayYearJson.forEach(function (array, index) {\n      if (arrayYearJson[index] == yearForPoly) {\n        place = index;\n      }\n    });\n    var finalnumber = arrayYearJson[place - 1];\n\n    if (finalnumber < 0) {\n      finalnumber = finalnumber * -1;\n    }\n\n    var yearFin = \"AD-\" + finalnumber + \"-1-1\";\n    MapPoly(yearFin);\n  }\n}\n_c = AddPolygon;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddPolygon\");","map":{"version":3,"names":["MapPoly","AddPolygon","props","otherNumber","minnumber","Date","getFullYear","smallNumber","relativeValue","finalnumber","yearForGeoJson","yearForPoly","yearMarker","arrayYearJson","place","forEach","array","index","push","parseInt","sort","a","b","yearFin"],"sources":["/Users/mihajlopetrovic/Desktop/Posao/Markers-Nearby/src/GeoJson/addPolygon.js"],"sourcesContent":["import MapPoly from \"./mapPoly\";\n\nexport default function AddPolygon(props){\n    var otherNumber;\n    var minnumber = new Date().getFullYear();\n    var smallNumber;\n    var relativeValue;\n    var finalnumber;\n    var yearForGeoJson = [-1,-1000,-200,-2000,-323,-500,1000,117,1279,1492,1530,1650,1715,1783,1815,1830,1850,1861,1872,1880,1914,1920,1938,1939,1940,1941,1942,1943,1944,1945,1946,1994,2020,400,600,800]\n    var yearForPoly = props.yearMarker;\n    if(yearForPoly<=0){\n          if(yearForPoly<0 && yearForPoly>-200){\n            MapPoly(\"BC-\"+1+\"-1-1\");\n          }else if(yearForPoly<-200 && yearForPoly>-323){\n            MapPoly(\"BC-\"+200+\"-1-1\");\n          }else if(yearForPoly<-323 && yearForPoly>-500){\n            MapPoly(\"BC-\"+323+\"-1-1\");\n          }else if(yearForPoly<-500 && yearForPoly>-1000){\n            MapPoly(\"BC-\"+500+\"-1-1\");\n          }else if(yearForPoly<-1000 && yearForPoly > -2000){\n            MapPoly(\"BC-\"+-1000+\"-1-1\");\n          }else if(yearForPoly<-2000 ){\n            MapPoly(\"BC-\"+2000+\"-1-1\");\n          }\n    }else{\n        let arrayYearJson=[];\n        let place;\n        yearForGeoJson.forEach(function(array,index) {\n            //var yearsJson=array.split(\"-\");\n            arrayYearJson.push(parseInt(array));\n        })\n        arrayYearJson.push(parseInt(yearForPoly));\n        arrayYearJson.sort(function(a, b){return a-b});\n        arrayYearJson.forEach(function(array,index){\n            if(arrayYearJson[index]==yearForPoly){\n                place=index;\n            }\n        })\n        var finalnumber=arrayYearJson[place-1];\n        if(finalnumber<0){\n            finalnumber=finalnumber*(-1);\n        }\n        var yearFin = \"AD-\"+finalnumber+\"-1-1\";\n        MapPoly(yearFin);\n        \n    }\n}\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}