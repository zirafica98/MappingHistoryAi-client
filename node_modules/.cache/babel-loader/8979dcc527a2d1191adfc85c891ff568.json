{"ast":null,"code":"var _jsxFileName = \"/Users/mihajlopetrovic/Desktop/Posao/MappingHistory-AI/client-2/src/Data/index.js\";\nimport React from 'react';\nimport StartFirebase from '../firebaseConfig/firebase';\nimport CustomMarker from '../Marker';\nimport { ref, onValue } from 'firebase/database';\nimport CustomMarkerMainCity from '../Marker/CustomMarkerMainCity';\nimport Loader from '../Loader/Loader';\nimport { serverLink } from '../Variable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst db = StartFirebase();\nexport class Data extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      loading: false,\n      items: this.props.items,\n      data: null,\n      radius: this.props.radius,\n      counter: 0,\n      setArray: null,\n      city: this.props.city,\n      question: this.props.question,\n      mainCity: false,\n      event: \"\",\n      image_url: \"\"\n    };\n  }\n\n  async componentDidMount() {\n    var city = this.state.city.toLowerCase();\n\n    if (city === \"london\" || city === \"paris\" || city === \"new york\" || city === \"berlin\" || city === \"roma\") {\n      this.setState({\n        mainCity: true\n      });\n      this.callMyData();\n    } else {\n      const timer = ms => new Promise(res => setTimeout(res, ms));\n\n      for (var i = 0; i <= 10; i++) {\n        if (i === 0) {\n          this.callDataAI(true);\n          await timer(15000);\n        } else {\n          this.callDataAI();\n          await timer(15000);\n        }\n      }\n    }\n  }\n\n  async callDataAI(firstTime) {\n    let prompt;\n    this.setState({\n      loading: true\n    });\n    fetch('category_img.json').then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n\n      return response.json();\n    }).then(data => {\n      // Izvuci sve kategorije i napravi string\n      const categoriesString = Object.keys(data).join(', ');\n      console.log('Kategorije kao string:', categoriesString);\n    }).catch(error => {\n      console.error('Došlo je do greške prilikom učitavanja JSON-a:', error);\n    });\n\n    if (this.state.question) {\n      prompt = this.state.question + ' Format for answer JSON{\"event\":\"???\",\"description\":\"???\",\"date\":\"mm/dd/yyyy\",\"type\":\"\",\"longitude\":\"???\",\"latitude\":\"???\"}. Event should be location related ' + this.state.city + '. Return everything in json format in one line.';\n\n      if (!firstTime) {\n        prompt += ' Event not to be: ' + this.state.event + '.';\n      }\n    } else {\n      prompt = 'Give me interesting historical event for ' + this.state.city + ' in the following form {\"event\":\"???\",\"description\":\"???\",\"date\":\"mm/dd/yyyy\",\"type\":\"\",\"longitude\":\"???\",\"latitude\":\"???\"}. It is mandatory to put quotation marks on the keys in json. Send longitude and latitude as numbers without additional tags.';\n\n      if (!firstTime) {\n        prompt = `Give me a unique historical event for ${this.state.city}, excluding the following events: ${this.state.event}. Please ensure that the events returned cover a variety of categories (e.g., cultural, political, scientific, etc.). Return the information in the following format: {\"event\":\"???\",\"description\":\"???\",\"date\":\"mm/dd/yyyy\",\"type\":\"\",\"longitude\":???, \"latitude\":???}.`;\n      }\n    }\n\n    const response = await fetch(serverLink + \"openAi\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        prompt\n      })\n    });\n\n    if (!response.ok) {\n      alert(\"Error fetching historical events\");\n      return;\n    }\n\n    const data = await response.json();\n    const parsedData = data.response.trim(); // const imageResponse = await fetch(serverLink + \"createImages\", {\n    //     method: \"POST\",\n    //     headers: {\n    //         'Content-Type': 'application/json',\n    //     },\n    //     body: JSON.stringify({\n    //         prompt: \"Generate an image of \" + JSON.parse(parsedData).event + \" with key figures and elements.\"\n    //     })\n    // });\n    // if (!imageResponse.ok) {\n    //     alert(\"Error generating image\");\n    //     return;\n    // }\n    // const imageData = await imageResponse.json();\n    // const imageUrl = imageData.bot;\n\n    this.setState(prevState => ({\n      data: JSON.parse(parsedData),\n      event: firstTime ? JSON.parse(parsedData).event : prevState.event + \",\" + JSON.parse(parsedData).event,\n      //image_url: imageUrl,\n      loading: false\n    }));\n  }\n\n  async callMyData() {\n    const dbRef = ref(db, '/2/data');\n    onValue(dbRef, snapshot => {\n      var records = [];\n      snapshot.forEach(childSnapshot => {\n        let keyName = childSnapshot.key;\n        let data = childSnapshot.val();\n\n        if (this.getDistance([data.long_marker, data.lat], [this.state.items[0].lon, this.state.items[0].lat]) <= this.state.radius && records.length < 5) {\n          records.push({\n            \"key\": keyName,\n            \"data\": data\n          });\n        }\n      });\n      records.forEach(element => {\n        if (element.data.bc_ad === \"BC\") {\n          element.data.complateYear = element.data.year * -1;\n        } else {\n          element.data.complateYear = element.data.year;\n        }\n      });\n      records.sort(function (a, b) {\n        return parseFloat(a.data.complateYear) - parseFloat(b.data.complateYear);\n      });\n      this.setState({\n        data: records\n      });\n    });\n  }\n\n  getDistance(origin, destination) {\n    var lon1 = this.toRadian(origin[1]),\n        lat1 = this.toRadian(origin[0]),\n        lon2 = this.toRadian(destination[1]),\n        lat2 = this.toRadian(destination[0]);\n    var deltaLat = lat2 - lat1;\n    var deltaLon = lon2 - lon1;\n    var a = Math.pow(Math.sin(deltaLat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(deltaLon / 2), 2);\n    var c = 2 * Math.asin(Math.sqrt(a));\n    var EARTH_RADIUS = 6371;\n    return c * EARTH_RADIUS * 1000;\n  }\n\n  toRadian(degree) {\n    return degree * Math.PI / 180;\n  }\n\n  sleep(delay) {\n    var start = new Date().getTime();\n\n    while (new Date().getTime() < start + delay);\n  }\n\n  render() {\n    //const { loading, data } = this.state;\n    if (this.state.data == null) {\n      return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 20\n      }, this);\n    } else {\n      if (this.state.mainCity) {\n        return /*#__PURE__*/_jsxDEV(CustomMarkerMainCity, {\n          things: this.state.data,\n          image_url: this.state.image_url\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 15\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(CustomMarker, {\n          things: this.state.data,\n          image_url: this.state.image_url\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 15\n        }, this);\n      }\n    }\n  }\n\n}","map":{"version":3,"names":["React","StartFirebase","CustomMarker","ref","onValue","CustomMarkerMainCity","Loader","serverLink","db","Data","Component","constructor","props","state","error","isLoaded","loading","items","data","radius","counter","setArray","city","question","mainCity","event","image_url","componentDidMount","toLowerCase","setState","callMyData","timer","ms","Promise","res","setTimeout","i","callDataAI","firstTime","prompt","fetch","then","response","ok","Error","json","categoriesString","Object","keys","join","console","log","catch","method","headers","body","JSON","stringify","alert","parsedData","trim","prevState","parse","dbRef","snapshot","records","forEach","childSnapshot","keyName","key","val","getDistance","long_marker","lat","lon","length","push","element","bc_ad","complateYear","year","sort","a","b","parseFloat","origin","destination","lon1","toRadian","lat1","lon2","lat2","deltaLat","deltaLon","Math","pow","sin","cos","c","asin","sqrt","EARTH_RADIUS","degree","PI","sleep","delay","start","Date","getTime","render"],"sources":["/Users/mihajlopetrovic/Desktop/Posao/MappingHistory-AI/client-2/src/Data/index.js"],"sourcesContent":["import React from 'react';\nimport StartFirebase from '../firebaseConfig/firebase';\nimport CustomMarker from '../Marker';\nimport {ref,onValue} from 'firebase/database'\nimport CustomMarkerMainCity from '../Marker/CustomMarkerMainCity';\nimport Loader from '../Loader/Loader';\nimport { serverLink } from '../Variable';\nconst db = StartFirebase();\nexport class Data extends React.Component {\n      constructor(props) {\n        super(props);\n        this.state = {\n          error: null,\n          isLoaded: false,\n          loading: false,\n          items: this.props.items,\n          data:null,\n          radius:this.props.radius,\n          counter:0,\n          setArray:null,\n          city:this.props.city,\n          question:this.props.question,\n          mainCity:false,\n          event:\"\",\n          image_url:\"\"\n        }\n      }\n\n      async componentDidMount(){\n        var city = (this.state.city).toLowerCase()\n        if(city === \"london\" || city === \"paris\" || city === \"new york\" || city === \"berlin\" ||  city === \"roma\"){\n          this.setState({\n            mainCity:true\n          })\n          this.callMyData();\n        \n        }else{\n          const timer = ms => new Promise(res => setTimeout(res, ms))\n          for(var i = 0 ; i <= 10 ; i++){\n            if(i===0){\n              this.callDataAI(true);\n              await timer(15000);\n            }else{\n              this.callDataAI();\n              await timer(15000);\n            }\n          }\n        }\n      }\n    \n    \n\n    async callDataAI(firstTime) {\n      let prompt;\n      this.setState({ loading: true });\n\n      fetch('category_img.json')\n    .then(response => {\n        if (!response.ok) {\n            throw new Error('Network response was not ok');\n        }\n        return response.json();\n    })\n    .then(data => {\n        // Izvuci sve kategorije i napravi string\n        const categoriesString = Object.keys(data).join(', ');\n        console.log('Kategorije kao string:', categoriesString);\n    })\n    .catch(error => {\n        console.error('Došlo je do greške prilikom učitavanja JSON-a:', error);\n    });\n\n\n      if (this.state.question) {\n          prompt = this.state.question + ' Format for answer JSON{\"event\":\"???\",\"description\":\"???\",\"date\":\"mm/dd/yyyy\",\"type\":\"\",\"longitude\":\"???\",\"latitude\":\"???\"}. Event should be location related ' + this.state.city + '. Return everything in json format in one line.';\n          \n          if (!firstTime) {\n              prompt += ' Event not to be: ' + this.state.event + '.';\n          }\n      } else {\n          prompt = 'Give me interesting historical event for ' + this.state.city + ' in the following form {\"event\":\"???\",\"description\":\"???\",\"date\":\"mm/dd/yyyy\",\"type\":\"\",\"longitude\":\"???\",\"latitude\":\"???\"}. It is mandatory to put quotation marks on the keys in json. Send longitude and latitude as numbers without additional tags.';\n          \n          if (!firstTime) {\n              prompt = `Give me a unique historical event for ${this.state.city}, excluding the following events: ${this.state.event}. Please ensure that the events returned cover a variety of categories (e.g., cultural, political, scientific, etc.). Return the information in the following format: {\"event\":\"???\",\"description\":\"???\",\"date\":\"mm/dd/yyyy\",\"type\":\"\",\"longitude\":???, \"latitude\":???}.`;\n          }\n      }\n  \n      const response = await fetch(serverLink + \"openAi\", {\n          method: 'POST',\n          headers: {\n              'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ prompt })\n      });\n  \n      if (!response.ok) {\n          alert(\"Error fetching historical events\");\n          return;\n      }\n  \n      const data = await response.json();\n      const parsedData = data.response.trim();\n  \n      // const imageResponse = await fetch(serverLink + \"createImages\", {\n      //     method: \"POST\",\n      //     headers: {\n      //         'Content-Type': 'application/json',\n      //     },\n      //     body: JSON.stringify({\n      //         prompt: \"Generate an image of \" + JSON.parse(parsedData).event + \" with key figures and elements.\"\n      //     })\n      // });\n  \n      // if (!imageResponse.ok) {\n      //     alert(\"Error generating image\");\n      //     return;\n      // }\n  \n      // const imageData = await imageResponse.json();\n      // const imageUrl = imageData.bot;\n  \n      this.setState(prevState => ({\n          data: JSON.parse(parsedData),\n          event: firstTime ? JSON.parse(parsedData).event : prevState.event + \",\" + JSON.parse(parsedData).event,\n          //image_url: imageUrl,\n          loading: false\n        \n      }));\n  }\n  \n\n\n\n    async callMyData(){\n      const dbRef = ref(db,'/2/data');\n        onValue(dbRef,(snapshot)=>{\n            var records=[]\n            snapshot.forEach(childSnapshot=>{\n                let keyName=childSnapshot.key;\n                let data=childSnapshot.val();\n                if(this.getDistance([data.long_marker,data.lat],[this.state.items[0].lon,this.state.items[0].lat])<=this.state.radius && records.length<5){\n                    records.push({\"key\":keyName,\"data\":data})\n                }\n            })\n\n            records.forEach((element) => {\n                if(element.data.bc_ad===\"BC\"){\n                    element.data.complateYear = element.data.year * (-1)\n                }else{\n                    element.data.complateYear = element.data.year \n                }\n            })\n\n            records.sort(function(a,b){\n                return parseFloat(a.data.complateYear) - parseFloat(b.data.complateYear);\n            })\n\n            this.setState({\n                data: records\n            });\n          })\n    }\n  \n\n\n    getDistance(origin, destination) {\n        var lon1 = this.toRadian(origin[1]),\n            lat1 = this.toRadian(origin[0]),\n            lon2 = this.toRadian(destination[1]),\n            lat2 = this.toRadian(destination[0]);\n    \n        var deltaLat = lat2 - lat1;\n        var deltaLon = lon2 - lon1;\n    \n        var a = Math.pow(Math.sin(deltaLat/2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(deltaLon/2), 2);\n        var c = 2 * Math.asin(Math.sqrt(a));\n        var EARTH_RADIUS = 6371;\n        return c * EARTH_RADIUS * 1000;\n    }\n    \n    toRadian(degree){\n        return degree*Math.PI/180\n    }\n    sleep(delay) {\n        var start = new Date().getTime();\n        while (new Date().getTime() < start + delay);\n    }\n\n    render() {\n      //const { loading, data } = this.state;\n        \n        if (this.state.data == null) {\n            return <Loader></Loader>;\n        }else{\n          if(this.state.mainCity) {\n            return (\n              <CustomMarkerMainCity things={this.state.data} image_url={this.state.image_url}></CustomMarkerMainCity>\n            );\n          }else{\n            return (\n              <CustomMarker things={this.state.data} image_url={this.state.image_url}></CustomMarker>\n            );\n          }\n            \n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}